<!--
    build.xml
    
    Copyright (c) 2010, 2011, 2012 Roberto Corradini. All rights reserved.
  
    This file is part of the reversi program
    http://github.com/rcrr/reversi
  
    This program is free software; you can redistribute it and/or modify it
    under the terms of the GNU General Public License as published by the
    Free Software Foundation; either version 3, or (at your option) any
    later version.
  
    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
    GNU General Public License for more details.
  
    You should have received a copy of the GNU General Public License
    along with this program; if not, write to the Free Software
    Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA
    or visit the site <http://www.gnu.org/licenses/>.
-->

<project name="JavaReversi" basedir="." default="main">

  <property name="src.dir" value="src"/>

  <property name="build.dir" value="build"/>
  <property name="classes.dir" value="${build.dir}/classes"/>
  <property name="classes-debug.dir" value="${build.dir}/classes-debug"/>
  <property name="jar.dir" value="${build.dir}/jar"/>

  <property name="javadoc.dir" value="${build.dir}/javadoc"/>

  <property name="test.src.dir" value="test"/>
  <property name="test.classes.dir" value="${build.dir}/test/classes"/>
  <property name="test.data.dir" value="${build.dir}/test/data"/>
  <property name="test.reports.dir" value="${build.dir}/test/reports"/>
  <property name="test.javadoc.dir" value="${build.dir}/test/javadoc"/>
  <property name="test.output-files.dir" value="${build.dir}/test/output-files"/>
  <property name="test.coverage.dir" value="${build.dir}/test/coverage"/>

  <property name="cloc.dir" value="${build.dir}/cloc"/>

  <property name="docs.dir" value="docs"/>
  <property name="docs.checkstyle.dir" value="${docs.dir}/checkstyle"/>
  <property name="checkstyle.reports.dir" value="${build.dir}/checkstyle"/>
  <property name="test.checkstyle.reports.dir" value="${build.dir}/test/checkstyle"/>

  <property name="lib.dir" value="lib"/>
  <mkdir dir="${lib.dir}"/>
  <property name="lib.base.dir" value="${lib.dir}/base"/>
  <mkdir dir="${lib.base.dir}"/>

  <!-- The JUnit jar library, used by he test target. -->
  <get src="http://search.maven.org/remotecontent?filepath=junit/junit/4.10/junit-4.10.jar"
       dest="${lib.base.dir}/junit-4.10.jar" verbose="on" skipexisting="true"/>

  <!-- The Joda Time jar library used by the Reversi program. -->
  <get src="http://search.maven.org/remotecontent?filepath=joda-time/joda-time/2.0/joda-time-2.0.jar"
       dest="${lib.base.dir}/joda-time-2.0.jar" verbose="on" skipexisting="true"/>

  <!-- Checkstyle jar library and dependencies. Used by the checkstyle target. -->
  <get src="http://search.maven.org/remotecontent?filepath=com/puppycrawl/tools/checkstyle/5.5/checkstyle-5.5.jar"
       dest="${lib.base.dir}/checkstyle-5.5.jar" verbose="on" skipexisting="true"/>
  <get src="http://search.maven.org/remotecontent?filepath=antlr/antlrall/2.7.4/antlrall-2.7.4.jar"
       dest="${lib.base.dir}/antlr-2.7.4.jar" verbose="on" skipexisting="true"/>
  <get src="http://search.maven.org/remotecontent?filepath=commons-beanutils/commons-beanutils-core/1.8.3/commons-beanutils-core-1.8.3.jar"
       dest="${lib.base.dir}/commons-beanutils-core-1.8.3.jar" verbose="on" skipexisting="true"/>
  <get src="http://search.maven.org/remotecontent?filepath=commons-cli/commons-cli/1.2/commons-cli-1.2.jar"
       dest="${lib.base.dir}/commons-cli-1.2.jar" verbose="on" skipexisting="true"/>
  <get src="http://search.maven.org/remotecontent?filepath=commons-logging/commons-logging/1.1.1/commons-logging-1.1.1.jar"
       dest="${lib.base.dir}/commons-logging-1.1.1.jar" verbose="on" skipexisting="true"/>
  <get src="http://search.maven.org/remotecontent?filepath=com/google/collections/google-collections/1.0/google-collections-1.0.jar"
       dest="${lib.base.dir}/google-collections-1.0.jar" verbose="on" skipexisting="true"/>

  <!-- The One-Jar utility. -->
  <get src="http://sourceforge.net/projects/one-jar/files/one-jar/one-jar-0.97/one-jar-ant-task-0.97.jar/download"
       dest="${lib.base.dir}/one-jar-ant-task-0.97.jar" verbose="on" skipexisting="true"/>
  <property name="one-jar.ant.jar" value="${lib.base.dir}/one-jar-ant-task-0.97.jar"/>
  <import>
    <javaresource name="one-jar-ant-task.xml">
      <classpath>
        <pathelement location="${lib.base.dir}/one-jar-ant-task-0.97.jar"/>
      </classpath>
    </javaresource>
  </import>

  <path id="lib.base.classpath">
    <fileset dir="${lib.base.dir}" includes="**/*.jar"/>
  </path>

  <!-- The JMockit tools. -->
  <property name="lib.jmockit.dir" value="${lib.dir}/jmockit"/>
  <mkdir dir="${lib.jmockit.dir}"/>
  <property name="jmockit.jar" value="${lib.jmockit.dir}/jmockit-0.999.13.jar"/>
  <get src="http://search.maven.org/remotecontent?filepath=com/googlecode/jmockit/jmockit/0.999.13/jmockit-0.999.13.jar"
       dest="${jmockit.jar}" verbose="on" skipexisting="true"/>
  <property name="jmockit-coverage.jar" value="${lib.jmockit.dir}/jmockit-coverage-0.999.13.jar"/>
  <get src="http://search.maven.org/remotecontent?filepath=com/googlecode/jmockit/jmockit-coverage/0.999.13/jmockit-coverage-0.999.13.jar"
       dest="${jmockit-coverage.jar}" verbose="on" skipexisting="true"/>
  <path id="lib.jmockit.classpath">
    <fileset dir="${lib.jmockit.dir}" includes="**/*.jar"/>
  </path>

  <path id="test.classpath">
    <fileset dir="${lib.base.dir}" includes="**/*.jar"/>
    <fileset dir="${jar.dir}" includes="${ant.project.name}.jar"/>
  </path>

  <path id="test.javadocs.classpath">
    <pathelement location="${src.dir}"/>
    <pathelement location="${test.src.dir}"/>
  </path>

  <property name="main-class" value="rcrr.reversi.ui.ReversiUI"/>

  <target name="clean">
    <delete dir="${build.dir}"/>
  </target>
  
  <target name="compile">
    <mkdir dir="${classes.dir}"/>
    <javac srcdir="${src.dir}" 
	   destdir="${classes.dir}" 
	   classpathref="lib.base.classpath" 
	   includeAntRuntime="false">
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
    <copy todir="${classes.dir}" overwrite="false">
      <fileset dir="${src.dir}">
	<include name="**/*.png"/>
      </fileset>
    </copy>
  </target>

  <target name="jar" depends="compile">
    <mkdir dir="${jar.dir}"/>
    <jar destfile="${jar.dir}/${ant.project.name}.jar" basedir="${classes.dir}">
      <manifest>
	<attribute name="Main-Class" value="${main-class}"/>
	<!-- Who is building this jar? -->
	<attribute name="Built-By" value="Roberto Corradini"/>
	<!-- Information about the program itself -->
	<attribute name="Implementation-Vendor" value="Roberto Corradini"/>
	<attribute name="Implementation-Title" value="Java Reversi"/>
	<attribute name="Implementation-Version" value="1.0.0"/>
      </manifest>
    </jar>
  </target>

  <!-- Construct the One-Jar file -->
  <target name="one-jar" depends="compile">
    <one-jar destfile="${jar.dir}/${ant.project.name}-full-1_0_0.jar">
      <manifest>
        <attribute name="One-Jar-Main-Class" value="${main-class}"/> 
	<!-- Who is building this jar? -->
	<attribute name="Built-By" value="Roberto Corradini"/>
	<!-- Information about the program itself -->
	<attribute name="Implementation-Vendor" value="Roberto Corradini"/>
	<attribute name="Implementation-Title" value="Java Reversi"/>
	<attribute name="Implementation-Version" value="1.0.0"/>
      </manifest>
      <main>
        <!-- Construct main.jar from classes -->
        <fileset dir="${classes.dir}"/>
      </main>
      <lib>
        <fileset dir="lib" includes="joda-time-2.0.jar"/>
      </lib>
    </one-jar>
  </target>

  <target name="run" depends="jar">
    <java fork="true" classname="${main-class}">
      <classpath>
	<pathelement location="${jar.dir}/${ant.project.name}.jar"/>
	<path refid="lib.base.classpath"/>
      </classpath>
      <arg value="rcrr.reversi.RandomStrategy"/>
      <arg value="rcrr.reversi.MaximizeDifference"/>
    </java>
  </target>

  <target name="human" depends="jar">
    <java fork="true" classname="${main-class}">
      <classpath>
	<pathelement location="${jar.dir}/${ant.project.name}.jar"/>
	<path refid="lib.base.classpath"/>
      </classpath>
      <arg value="rcrr.reversi.HumanStrategy"/>
      <arg value="rcrr.reversi.IagoStrategy"/>
    </java>
  </target>

  <target name="test.compile" depends="jar">
    <delete dir="${test.classes.dir}"/>
    <mkdir dir="${test.classes.dir}"/>
    <javac srcdir="${test.src.dir}" destdir="${test.classes.dir}" includeAntRuntime="false">
      <classpath refid="test.classpath"/>
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
    <copy todir="${test.classes.dir}" overwrite="false">
      <fileset dir="${test.src.dir}">
	<include name="**/*.dat" />
      </fileset>
    </copy>
  </target>

  <target name="coverage" depends="test,compile-debug">
    <delete dir="${test.coverage.dir}"/>
    <mkdir dir="${test.coverage.dir}"/>
    <junit fork="yes" forkmode="once" printsummary="withOutAndErr">
      <!--sysproperty key="jmockit-tools" value="coverage"/-->
      <sysproperty key="jmockit-coverage-output" value="html"/>
      <sysproperty key="jmockit-coverage-outputDir" value="${test.coverage.dir}"/>
      <sysproperty key="jmockit-coverage-srcDirs" value="${src.dir}"/>
      <sysproperty key="jmockit-coverage-classes" value="${classes.dir}"/>
      <!--sysproperty key="jmockit-coverage-excludes" value=""/-->
      <!--sysproperty key="jmockit-coverage-metrics" value="all"/-->
      <jvmarg value="-javaagent:${jmockit.jar}"/>
      <jvmarg value="-ea"/>
      <jvmarg value="-Dtest.output-files.dir=${test.output-files.dir}"/>
      <formatter type="brief" usefile="false"/>
      <formatter type="xml"/>
      <batchtest todir="${test.data.dir}" unless="test.class.name">
	<fileset dir="${test.classes.dir}"
                 includes="**/*Test.class"
                 excludes="**/*AlphaBeta*.class,
                           **/GameTest.class,
                           **/IagoMethodsTest.class,
                           **/IagoTest.class,
                           **/MinimaxTest.class,
                           **/RandomStrategyTest.class,
                           **/ReversiTest.class"
                 />
      </batchtest>
      <classpath path="/usr/lib/jvm/java-6-openjdk/lib/tools.jar"/>
      <classpath>
	<path refid="lib.jmockit.classpath"/>
	<pathelement path="${test.classes.dir}"/>
	<pathelement path="${classes-debug.dir}"/>
	<path refid="lib.base.classpath"/>
      </classpath>
    </junit>
  </target>

  <target name="test" depends="jar,test.compile">
    <delete dir="${test.data.dir}"/>
    <mkdir dir="${test.data.dir}"/>
    <delete dir="${test.reports.dir}"/>
    <mkdir dir="${test.reports.dir}"/>
    <delete dir="${test.output-files.dir}"/>
    <mkdir dir="${test.output-files.dir}"/>
    <junit fork="yes" forkmode="once" printsummary="withOutAndErr"
	   errorProperty="test.failed"
	   failureProperty="test.failed">
      <jvmarg value="-ea"/>
      <jvmarg value="-Dtest.output-files.dir=${test.output-files.dir}"/>
      <formatter type="brief" usefile="false"/>
      <formatter type="xml"/>
      <!-- In case of testing a single class use: -->
      <!-- ant test -Dtest.class.name qualified classname -->
      <test name="${test.class.name}" todir="${test.data.dir}" if="test.class.name"/>
      <batchtest todir="${test.data.dir}" unless="test.class.name">
	<fileset dir="${test.classes.dir}" includes="**/*Test.class"/>
      </batchtest>
      <classpath>
	<pathelement path="${test.classes.dir}"/>
	<pathelement location="${jar.dir}/${ant.project.name}.jar"/>
	<path refid="lib.base.classpath"/>
      </classpath>
    </junit>
    <junitreport todir="${test.data.dir}">
      <fileset dir="${test.data.dir}">
	<include name="TEST-*.xml"/>
      </fileset>
      <report format="frames" todir="${test.reports.dir}"/>
    </junitreport>
    <fail message="Test failed. Check log and/or reports." if="test.failed"/>
  </target>

  <target name="compile-debug">
    <mkdir dir="${classes-debug.dir}"/>
    <javac srcdir="${src.dir}" 
	   destdir="${classes-debug.dir}" 
	   classpathref="lib.base.classpath" 
	   includeAntRuntime="false"
           debug="true">
      <compilerarg value="-Xlint:unchecked"/>
    </javac>
  </target>

  <target name="javadocs" depends="compile"
          description="Create Javadoc API documentation">
    <delete dir="${javadoc.dir}"/>
    <mkdir dir="${javadoc.dir}"/>
    <javadoc author="true"
	     destdir="${javadoc.dir}"
	     packagenames="rcrr.*"
	     sourcepath="${src.dir}"
	     use="true"
	     version="true"
	     windowtitle="documentation"
	     private="false">
      <classpath refid="lib.base.classpath"/>
    </javadoc>
  </target>
  
  <target name="test.javadocs" depends="test.compile"
          description="Create Javadoc Test documentation">
    <delete dir="${test.javadoc.dir}"/>
    <mkdir dir="${test.javadoc.dir}"/>
    <javadoc author="true"
	     destdir="${test.javadoc.dir}"
	     packagenames="rcrr.*"
	     sourcepathref="test.javadocs.classpath"
	     use="true"
	     version="true"
	     windowtitle="test documentation"
	     private="false">
      <classpath refid="test.classpath"/>
    </javadoc>
  </target>
  
  <target name="clean-build" depends="clean,jar"/>
  
  <target name="main" depends="clean,test,javadocs,test.javadocs,one-jar"/>

  <property name="cloc.executable" value="/usr/bin/cloc"/>  
  <available file="${cloc.executable}" type="file"
             property="cloc.present"/>

  <target name="cloc" if="${cloc.present}">
    <delete dir="${cloc.dir}"/>
    <mkdir dir="${cloc.dir}"/>
    <exec executable="cloc">
      <arg value="--no3"/>
      <arg value="--out=${cloc.dir}/cloc-java-src-report.txt"/>
      <arg value="src"/>
    </exec>
    <exec executable="cloc">
      <arg value="--no3"/>
      <arg value="--out=${cloc.dir}/cloc-java-test-report.txt"/>
      <arg value="test"/>
    </exec>
  </target>

  <taskdef resource="checkstyletask.properties">
    <classpath refid="lib.base.classpath"/>
  </taskdef>

  <target name="checkstyle"
          description="Generates a report of code convention violations.">
    <delete dir="${checkstyle.reports.dir}"/>
    <mkdir dir="${checkstyle.reports.dir}"/>
    
    <checkstyle config="${docs.checkstyle.dir}/reversi_checks.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <formatter type="xml" tofile="${checkstyle.reports.dir}/checkstyle_report.xml"/>
      <fileset dir="src" includes="**/*.java"/>
  </checkstyle>
  
  <xslt in="${checkstyle.reports.dir}/checkstyle_report.xml"
	out="${checkstyle.reports.dir}/checkstyle_report.html"
	style="${docs.checkstyle.dir}/checkstyle-noframes.xsl"/>
  
  </target>

  <target name="test.checkstyle"
          description="Generates a report of code convention violations for tests.">
    <delete dir="${test.checkstyle.reports.dir}"/>
    <mkdir dir="${test.checkstyle.reports.dir}"/>
    
    <checkstyle config="${docs.checkstyle.dir}/reversi_checks.xml"
                failureProperty="checkstyle.failure"
                failOnViolation="false">
      <formatter type="xml" tofile="${test.checkstyle.reports.dir}/checkstyle_report.xml"/>
      <fileset dir="test" includes="**/*.java"/>
  </checkstyle>
  
  <xslt in="${test.checkstyle.reports.dir}/checkstyle_report.xml"
	out="${test.checkstyle.reports.dir}/checkstyle_report.html"
	style="${docs.checkstyle.dir}/checkstyle-noframes.xsl"/>
  
  </target>

  <!--
    Findbugs tool http://findbugs.sourceforge.net/
  -->
  <property name="findbugs.home" value="/home/rcrr/lisp/prj/findbugs-1.3.9"/>
  <property name="findbugs.reports.dir" value="${build.dir}/findbugs"/>
  <available file="${findbugs.home}" type="dir"
             property="findbugs.present"/>
  <path id="findbugs.classpath">
    <fileset dir="${findbugs.home}/lib">
      <include name="**/*.jar"/>
    </fileset>
  </path>
  <target name="findbugs" depends="findbugs.is_there, findbugs.is_not_there"/>
  <target name="findbugs.is_there" depends="jar" if="${findbugs.present}">
    <taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
      <classpath refid="findbugs.classpath"/>
    </taskdef>
    <delete dir="${findbugs.reports.dir}"/>
    <mkdir dir="${findbugs.reports.dir}"/>
    <findbugs home="${findbugs.home}"
              output="xml:withMessages"
              outputFile="${findbugs.reports.dir}/rcrr.reversi.xml">
      <auxClasspath refid="lib.base.classpath"/>
      <sourcePath path="${src.dir}"/>
      <class location="${jar.dir}/${ant.project.name}.jar"/>
    </findbugs>
    <xslt in="${findbugs.reports.dir}/rcrr.reversi.xml"
          out="${findbugs.reports.dir}/rcrr.reversi.html"
          style="${findbugs.home}/src/xsl/fancy-hist.xsl"/>
  </target>
  <target name="findbugs.is_not_there" unless="${findbugs.present}">
    <echo message="Findbugs has not been found in: ${findbugs.home}"/>
  </target>

  
</project>
