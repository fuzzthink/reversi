
-- PostgreSQL script part of the reversi program.
-- This script deletes and reloads the log generated by endgame_solver (exact_solver) when run with GAME_TREE_DEBUG option turned on.

-- Start psql by running: psql -U reversi -w -d reversi -h localhost
-- Load the file by running the command: \i pg_load_rand.sql
-- Or run by a shell prompt: time psql -U reversi -w -d reversi -h localhost -f pg_load_rand.sql

CREATE OR REPLACE FUNCTION check_rand_log() RETURNS RECORD AS $$
DECLARE
  ret                     RECORD;
  node                    RECORD;
  rel                     RECORD;
  collisions              INTEGER;
  duplicates              INTEGER;
  duplicate_count         INTEGER;
  collision_count         INTEGER;
  row_count               INTEGER;
  distinct_game_positions INTEGER;
  distinct_hashes         INTEGER;
  distinct_rels           INTEGER;
BEGIN
  RAISE NOTICE 'Checking records in table rand_log ...';
  SELECT COUNT(*) INTO row_count FROM rand_log;
  SELECT COUNT(DISTINCT game_position) INTO distinct_game_positions FROM rand_log;
  SELECT COUNT(DISTINCT hash) INTO distinct_hashes FROM rand_log;
  SELECT COUNT(DISTINCT (hash, parent_hash)) INTO distinct_rels FROM rand_log;
  collisions := 0;
  duplicates := 0;
  FOR node IN SELECT DISTINCT hash FROM rand_log LOOP
    SELECT COUNT(hash) INTO duplicate_count FROM rand_log AS full_table WHERE node.hash=full_table.hash;
    SELECT COUNT(DISTINCT game_position) INTO collision_count FROM rand_log AS full_table WHERE node.hash=full_table.hash;
    collisions := collisions + collision_count - 1;
    duplicates := duplicates + duplicate_count - collision_count;
  END LOOP;
  RAISE NOTICE 'Check completed: row count is %, distinct_game_positions are %, distinct_hashes are %, distinct_rels are %, collisions are %, duplicates are %.',
               row_count,
               distinct_game_positions,
               distinct_hashes,
               distinct_rels,
               collisions,
               duplicates;
  
  SELECT row_count, distinct_game_positions, distinct_hashes, distinct_rels, collisions, duplicates INTO ret;
  RETURN ret;
END;
$$ LANGUAGE plpgsql;


-- Original table generated by exact_solver.c
DROP TABLE IF EXISTS rand_log;

-- CALL_ID;HASH;PARENT_HASH;GAME_POSITION;EMPTY_COUNT;CALL_LEVEL;IS_LEF;LEGAL_MOVE_COUNT;LEGAL_MOVE_COUNT_ADJUSTED;MOVE_LIST

CREATE TABLE rand_log (call_id                   INTEGER,
                       hash                      VARCHAR(16),
                       parent_hash               VARCHAR(16),
                       game_position             VARCHAR(65),
                       empty_count               INTEGER,
                       call_level                INTEGER,
                       is_leaf                   BOOLEAN,
                       legal_move_count          INTEGER,
                       legal_move_count_adjusted INTEGER,
                       move_list                 VARCHAR(78),
                       PRIMARY KEY(call_id));

\COPY rand_log FROM '/home/rcrr/base/prj/reversi/c/rand_log.csv' WITH (FORMAT CSV, DELIMITER ';', HEADER true);

VACUUM (FULL, ANALYZE, VERBOSE) rand_log;

CREATE INDEX rand_log_hash ON rand_log (hash);

SELECT check_rand_log();

--
SELECT DISTINCT r.empty_count AS empty_square_count
FROM rand_log AS r
ORDER BY empty_square_count DESC;

SELECT DISTINCT r.legal_move_count_adjusted AS mobility
FROM rand_log AS r
ORDER BY mobility DESC;

SELECT
  rand_log.empty_count AS empty_square_count,
  count(rand_log.empty_count) AS sample_size,
  round(avg(rand_log.legal_move_count_adjusted), 4) AS average_mobility, 
  min(rand_log.legal_move_count_adjusted) AS min_mobility,
  max(rand_log.legal_move_count_adjusted) AS max_mobility,
  round(stddev_pop(rand_log.legal_move_count_adjusted), 4) AS standard_deviation
FROM 
  rand_log
GROUP BY
  rand_log.empty_count
ORDER BY
  rand_log.empty_count DESC;


SELECT
  rand_log.legal_move_count_adjusted AS mobility,
  count(*) AS frequency
FROM
  rand_log
WHERE
  rand_log.empty_count = 30
GROUP BY
  rand_log.legal_move_count_adjusted
ORDER BY
  rand_log.legal_move_count_adjusted ASC;

