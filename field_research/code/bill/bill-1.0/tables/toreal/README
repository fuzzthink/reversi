This directory contains programs to generate tables that:
	Convert an unsigned char (8-bit byte) that contains the legals moves
in a single line to a 64-bit string that has the same legal moves mapped out
on the board.  This string can be OR'ed with strings from other bytes to get
the full legal-move bit string.
	An entry in a table has the following format:
		struct real_entry 
		{
		    long low,high;
		}
Here is a map of bit pattern to square number:
	00 01 02 03 04 05 06 07		/* north edge */
	07 15 23 31 39 47 55 63		/* east edge */
	63 62 61 60 59 58 57 56		/* south edge */
	56 48 40 32 24 16 08 00		/* west edge */
	09 10 11 12 13 14 17 18		/* till c3 */
	19 20 21 22 25 26 29 30		/* till g4 */
	33 34 37 38 41 42 43 44		/* till e6 */
	45 46 49 50 51 52 53 54		/* till h7 */
Note the overlap of the corners and the lack of data for the center
impossible squares.
	The bits are put in as follows: (the VAX conventions are followed
througout.  Portability should be possible to byte-swapping machines,
though.)
	63		32 | 31		0
	     high int      |   low int
Only shifts are to be used to put the bits in (for portability).
Always, the leftmost (west) square of a subsequence (e.g. a 4-bit seq) is taken to 
be the start (low bit).  In case of ties, the highest (north) square is used.

	There are a number of types of tables.  They are named as follows:
H?	(8): a? - h?, in bits 0-7, where ? is from 1-8, (the horizontal lines)
V?	(8): ?1 - ?8, 		   where ? is from a-h, (the vertical lines)
D80_1	(1): a1 - h8, in bits 0-7			(the main diagonal)
D80_2	(1): a8 - h1
D44_1	(1): e1 - h4 in bits 4-7, and a5 - d8 in bits 0-3
D44_2	(1): a4 - d1 		, and e8 - h5
D53_1	(1): d1 - h5 in bits 3-7, and f1 - h3 in bits 0-2
D53_2	(1): a5 - e1 		, and a3 - c1
D53_3	(1): a4 - e8		, and a6 - c8
D53_4	(1): d8 - h4		, and f8 - h6
D60_1	(1): c1 - h6 in bits 0-5
D60_2	(1): a6 - f1
D60_3	(1): a3 - f8
D60_4	(1): c8 - h3
D70_1	(1): b1 - h7 in bits 0-6
D70_2	(1): a7 - g1
D70_3	(1): a2 - g8
D70_4	(1): b8 - h2


	
	